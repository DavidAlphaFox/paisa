{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Paisa is a command line tool and Web UI to manage personal finance. It builds on top of the ledger double entry accounting tool.</p> <ul> <li> Your financial data never leaves your system.</li> <li> The journal and config information are stored in plain text files   that can be easily version controlled. You can collaborate with   others by giving access to the files.</li> <li> Can track the latest market price of your Mutual Fund, NPS Fund   and Stock holdings.</li> <li> Can show the Mutual Fund and Stock holdings eligible for LTCG and   help you plan Tax Harvesting.</li> <li> Can convert CSV or Excel sheets to Ledger journal.</li> <li> Can help with retirement planning.</li> <li> And many more visualizations to help you make any financial   decisions.</li> </ul> <p> Install Demo </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<ul> <li>Follow the installation instruction on ledger site and install   ledger. Windows users can install ledger via   chocolatey. Paisa is also compatible with hledger. Refer   ledger cli page for more information.</li> <li>Download the latest prebuilt binary</li> <li>Once downloaded, you can perform the following steps to install it. <pre><code># mv paisa-* paisa\n# chmod u+x paisa\n# xattr -dr com.apple.quarantine paisa # applicable only on Mac\n# mv paisa /usr/local/bin\n</code></pre></li> </ul>"},{"location":"getting-started/installation/#quick-start","title":"Quick Start","text":"<p>Run the following commands to checkout paisa features. Read the tutorial to understand the details.</p> <p><pre><code># mkdir finance\n# cd finance\n# paisa init\nINFO Generating config file: /home/john/finance/paisa.yaml\nINFO Generating journal file: /home/john/finance/personal.ledger\n# paisa update\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Syncing transactions from journal\nINFO Fetching commodities price history\nINFO Fetching commodity NIFTY\nINFO Fetching commodity NIFTY_JR\n# paisa serve\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Listening on 7500\n</code></pre> Go to http://localhost:7500</p>"},{"location":"getting-started/tutorial/","title":"Tutorial","text":"<p>This tutorial will introduce all the concepts necessary to get started. Paisa builds on top of ledger, so we will first spend some time to familiarize the terms and concepts used by ledger</p>"},{"location":"getting-started/tutorial/#journal","title":"Journal","text":"<p>A journal file captures all your financial transactions. A transaction may represent a mutual fund purchase, EPF contribution and so on. Let's create a file named <code>personal.ledger</code> with the following content</p> <pre><code>2022/01/01/*(1)!*/ Salary/*(2)!*/\nIncome:Salary:Acme/*(3)!*/                         -100,000 INR/*(6)!*/\nAssets:Checking/*(4)!*/                          /*(5)!*/100,000 INR\n</code></pre> <ol> <li>Transaction <code>Date</code></li> <li>Transaction description, also called as <code>Payee</code></li> <li>Debit <code>Account</code></li> <li>Credit <code>Account</code></li> <li><code>Amount</code></li> <li><code>Currency</code></li> </ol> <p>ledger follows the double-entry accounting system. In simple terms, it tracks the movement of money from debit account to credit account. Here <code>Income:Salary:Acme</code> is the debit account and <code>Assets:Checking</code> is the credit account. The date at which the transaction took place and a description of the transaction is written in the first line followed by the list of credit or debit entry. Account naming conventions are explained later. The <code>:</code> in the account name represents hierarchy. Its use will become more clear when we look at the reports generated by ledger. The sum of the balance of all the accounts must be zero.</p> <pre><code>2022/01/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                             100,000 INR\n2022/02/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                             100,000 INR\n2022/03/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                             100,000 INR\n</code></pre> <p>let's add few more entries. The total balance in your savings account could be found by</p> <pre><code># ledger -f personal.ledger balance Assets:Checking\n300,000 INR  Assets:Checking\n</code></pre> <p>Let's say your company deducts 12,000 INR and contributes it to EPF, we could represent it as follows</p> <pre><code>2022/01/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                              88,000 INR\nAssets:Debt:EPF                              12,000 INR\n2022/02/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                              88,000 INR\nAssets:Debt:EPF                              12,000 INR\n2022/03/01 Salary\nIncome:Salary:Acme                         -100,000 INR\nAssets:Checking                              88,000 INR\nAssets:Debt:EPF                              12,000 INR\n</code></pre> <pre><code># ledger -f personal.ledger balance Assets\n          36,000 INR  Assets:Debt:EPF\n         264,000 INR  Assets:Checking\n--------------------\n         300,000 INR\n</code></pre>"},{"location":"getting-started/tutorial/#commodity","title":"Commodity","text":"<p>So far we have only dealt with INR. ledger can handle commodity as well. Let's say you are also investing 10,000 INR in UTI Nifty Index Fund and 10,000 INR in ICICI Nifty Next 50 Index Fund every month.</p> <pre><code>2018/01/01 Investment\nAssets:Checking                              -20,000 INR\nAssets:Equity:NIFTY         148.0865 NIFTY @ 67.5281 INR\nAssets:Equity:NIFTY_JR   358.6659 NIFTY_JR @ 27.8811 INR\n2018/02/01 Investment\nAssets:Checking                              -20,000 INR\nAssets:Equity:NIFTY         140.2870 NIFTY @ 71.2824 INR\nAssets:Equity:NIFTY_JR   363.2242 NIFTY_JR @ 27.5312 INR\n2018/03/01 Investment\nAssets:Checking                              -20,000 INR\nAssets:Equity:NIFTY         147.5908 NIFTY @ 67.7549 INR\nAssets:Equity:NIFTY_JR   378.4323 NIFTY_JR @ 26.4248 INR\n</code></pre> <p>Let's consider <code>148.0865 NIFTY @ 67.5281 INR</code>. Here NIFTY is the name of the commodity and we have bought 148.0865 units at 67.5281 INR per unit.</p> <pre><code># ledger -f personal.ledger balance Assets --market\n          94,615 INR  Assets\n          36,000 INR    Debt:EPF\n          58,615 INR    Equity\n          29,539 INR      NIFTY\n          29,076 INR      NIFTY_JR\n--------------------\n          94,615 INR\n</code></pre>"},{"location":"getting-started/tutorial/#interest","title":"Interest","text":"<p>There are many instruments like EPF, FD, etc that pay interest at regular intervals. We can treat it as just another transaction.</p> <pre><code>2022/03/31 EPF Interest\nIncome:Interest:EPF                         -15,000 INR\nAssets:Debt:EPF                              15,000 INR\n</code></pre>"},{"location":"getting-started/tutorial/#config","title":"Config","text":"<p>So far we have been mostly talking about ledger. We need to know the basics of ledger because paisa builds on top of ledger.</p> <p>paisa checks for a config file named <code>paisa.yaml</code> in the current directory. It can also be set via flag <code>--config</code> or env variable <code>PAISA_CONFIG</code>. The default config is tuned for Indians, users from other countries would have to change the <code>default_currency</code> and <code>locale</code>. Check the config section for details.</p> <pre><code>journal_path: /home/john/finance/personal.ledger # (1)!\ndb_path: /home/john/finance/paisa.db # (2)!\ncommodities: # (3)!\n- name: NIFTY\ntype: mutualfund\ncode: 120716\n- name: NIFTY_JR\ntype: mutualfund\ncode: 120684\n</code></pre> <ol> <li>absolute path of journal file</li> <li>absolute path of sql database</li> <li>commodities list</li> </ol> <p>paisa can fetch the latest price of mutual funds, nps funds and stocks as of today. For other types of commodities, the purchase/sell price of the last transaction would be considered the latest price. The code is the scheme code of the fund. The search command can be used to find scheme code</p> <pre><code># paisa search mutualfund\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Using cached results; pass '-u' to update the cache\n\u2714 ICICI Prudential Asset Management Company Limited\n\u2714 ICICI Prudential Nifty Next 50 Index Fund - Direct Plan -  Growth\nINFO Mutual Fund Scheme Code: 120684\n</code></pre> <p>You might see a lot of funds with similar names. The search command supports crude fuzzy search. For example, <code>nifty next grow direct</code> would match the above fund.</p>"},{"location":"getting-started/tutorial/#update","title":"Update","text":"<p>Once the config file is created, run the update command, followed by the serve command.</p> <pre><code># paisa update\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Syncing transactions from journal\nINFO Fetching commodities price history\nINFO Fetching commodity NIFTY\nINFO Fetching commodity NIFTY_JR\n# paisa serve\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Listening on 7500\n</code></pre> <p>You can then go to http://localhost:7500 to view more details. The update command loads all the transactions from journal file and fetch the latest price of all the commodities. Whenever you make any changes to the journal file, you need to run the update command. The serve command starts a local server and provides the Web UI.</p>"},{"location":"reference/accounts/","title":"Accounts","text":"<p>If you take a typical transaction, money moves between two parties. In ledger, you call them Account. At least two accounts are involved in any transaction. Accounts are also hierarchical. This helps with the organization. For example you can treat EPF and PPF as two accounts namely <code>Assets:Debt:EPF</code> and <code>Assets:Debt:PPF</code>. The hierarchy helps you ask questions like what is the balance of <code>Assets:Debt</code>, which will include both EPF and PPF</p> <p>Even though ledger doesn't have any strict Account naming convention, paisa expects you to follow the standard naming convention.</p> <p>There are four types of account namely</p> <ol> <li>Assets</li> <li>Liabilities</li> <li>Income</li> <li>Expenses</li> </ol> <p>All the accounts you create should be under one of these accounts. This naming convention is a necessity, because without which, it's not possible to tell whether you are spending money or investing money. A transaction from Assets account to Expenses account implies that you are spending money.</p> <p>Money typically flows from Income to Assets, from Assets to either Expenses, Liabilities or other Assets, from Liabilities to Expenses.</p> <pre><code>graph LR\n  I[Income] --&gt; A[Assets];\n  A --&gt; E[Expenses];\n  A --&gt; A;\n  A --&gt; L[Liabilities];\n  L --&gt; E[Expenses];</code></pre> <p>As a general principle, try not to create too many accounts at second level. The UI works best when you create less than or equal to 12 second level accounts under each type. For example, you can have 12 accounts under <code>Expenses</code>. But if you want more, try to add them under 3 level, example <code>Expenses:Food:Subway</code>.</p>"},{"location":"reference/accounts/#assets","title":"Assets","text":"<p>All your assets should go under <code>Assets:</code>. The level of granularity is up to you. The recommended convention is to use <code>Assets:{instrument_type}:{instrument_name}</code>. The instrument type may be <code>Cash</code>, <code>Equity</code>, <code>Debt</code>, etc. The instrument name may be the name of the fund, stock, etc</p>"},{"location":"reference/accounts/#checking","title":"Checking","text":"<p><code>Assets:Checking</code> is a special account where you keep your money for daily use. This will be included in your net worth, but will not be treated as an investment. So gain page for example, will exclude this account and won't show the returns.</p>"},{"location":"reference/accounts/#income","title":"Income","text":"<p>All your income should come from <code>Income:</code>. The typical way is to treat each employer as a separate account.</p> <ul> <li><code>Income:Salary:{company}</code> - salary debit account</li> </ul>"},{"location":"reference/accounts/#interest","title":"Interest","text":"<p><code>Income:Interest</code> is a special type of account from the perspective of returns calculation. Let's assume you have bought APPLE stock. You might be buying them at regular intervals. To calculate your returns, we can compute the difference between purchase price and current price.</p> <p>Now in case of FD, you will get your interest credited to your account. The returns is the difference between the amount you deposited and the final balance. It's essential we need to know which transactions are deposits and which are interest credits.</p> <p>Any money that comes from the sub account of <code>Income:Interest</code> will be treated as interest. This convention allows paisa to calculate the returns of any debt instrument without explicitly specifying anything else.</p> <ul> <li><code>Income:Interest:{name}</code> - interest debit account</li> </ul>"},{"location":"reference/accounts/#tax","title":"Tax","text":"<p>Income tax paid to government should be credited to <code>Expenses:Tax</code> account. This is used to calculate your Net Income and your Savings Rate.</p>"},{"location":"reference/accounts/#expenses","title":"Expenses","text":"<p>All your expenses should go to <code>Expenses:{category}</code> accounts. You can also have more than 2 levels as well. The expense page will roll it up to 2 level wherever necessary.</p>"},{"location":"reference/allocation-targets/","title":"Allocation Targets","text":"<p>Paisa allows you to set a allocation target for a group of accounts. The allocation page shows how far your current allocation is from the allocation target. For example, to keep a 40:60 split between debt and equity, add the following configuration to the <code>paisa.yaml</code> file. The account name can have <code>*</code> which matches any characters</p> <pre><code>allocation_targets:\n- name: Debt\ntarget: 40\naccounts:\n- Assets:Debt:*\n- name: Equity\ntarget: 60\naccounts:\n- Assets:Equity:*\n</code></pre>"},{"location":"reference/analysis/","title":"Analysis","text":"<p>Ledger represents everything except currency as commodities. A commodity could represent physical object like Gold or certificates like Stock, Bond etc. Some commodities like Mutual Fund is a container for Securities. When you own a mutual fund unit, you indirectly own these securities.</p> <p>The Analysis page unwraps the container and shows you what securities you own along with their amount and percentage. It also categorizes the securities by their industry and rating.</p> <p>Example</p> <p>The data that powers this page comes from various sources and might not be 100% accurate. Before you make any decision based on this information, double check via different source.</p>"},{"location":"reference/budget/","title":"Budget","text":"<p>Paisa supports a simple budgeting system. Let's say you get 50000 INR at the beginning of the month. You want to budget this amount and figure out how much you can spend on each category.</p> <p>Let's add a salary transaction to the ledger:</p> <pre><code>2023/08/01 Salary\nIncome:Salary:Acme                         -50,000 INR\nAssets:Checking\n</code></pre> <p>Now you have 50k in your checking account. Let's budget this amount:</p> <pre><code>~ Monthly in 2023/08/01\nExpenses:Rent                              15,000 INR\nExpenses:Food                              10,000 INR\nExpenses:Clothing                           5,000 INR\nExpenses:Entertainment                      5,000 INR\nExpenses:Transport                          5,000 INR\nExpenses:Personal                           5,000 INR\nAssets:Checking\n</code></pre> <p>The <code>~</code> character indicates that this is a periodic transaction. This is not a real transaction, but used only for forecasting purposes. You can read more about periodic expressions and periodic transactions.</p> <p>Bug</p> <p>Even though the interval part is optional as per the doc, there is a bug in the ledger-cli, so you can't use <code>~ in 2023/08/01</code>, instead you always have to specify some interval like <code>~ Monthly in 2023/08/01</code>.</p> <p></p> <p>Now you can see that you will have 5k left in your checking account at the end of the month, if you spend as per your budget. Before you spend, you can check your budget and verify if you have money available under that category.</p> <p>Let's add some real transactions.</p> <pre><code>2023/08/02 Rent\nExpenses:Rent                             15,000 INR\nAssets:Checking\n2023/08/03 Transport\nExpenses:Transport                         1,000 INR\nAssets:Checking\n2023/08/03 Food\nExpenses:Food                              8,500 INR\nAssets:Checking\n2023/08/05 Transport\nExpenses:Transport                         2,000 INR\nAssets:Checking\n2023/08/07 Transport\nExpenses:Transport                         3,000 INR\nAssets:Checking\n2023/08/10 Personal\nExpenses:Personal                          4,000 INR\nAssets:Checking\n2023/08/15 Insurance\nExpenses:Insurance                         10000 INR\nAssets:Checking\n</code></pre> <p></p> <p>As the month progresses, you can see how much you have spent and how much you have left. You notice that you have overspent on transport and you have missed the insurance payment. You have a budget deficit now. That means, you can't actually spend as per your budget. You have to first bring the deficit back to 0. Let's cut down the entertainment and clothing budget to 0 and add insurance.</p> <pre><code>~ Monthly in 2023/08/01\nExpenses:Rent                             15,000 INR\nExpenses:Food                             10,000 INR\nExpenses:Clothing                              0 INR\nExpenses:Entertainment                         0 INR\nExpenses:Transport                         5,000 INR\nExpenses:Personal                          5,000 INR\nAssets:Checking\n</code></pre> <p></p> <p>You can go back and adjust your budget anytime. Let's move on to the next month, assuming you haven't made any further transaction.</p> <pre><code>2023/09/01 Salary\nIncome:Salary:Acme                       -50,000 INR\nAssets:Checking\n~ Monthly in 2023/09/01\nExpenses:Rent                             15,000 INR\nExpenses:Food                             10,000 INR\nExpenses:Clothing                          5,000 INR\nExpenses:Entertainment                     5,000 INR\nExpenses:Transport                         5,000 INR\nExpenses:Personal                          5,000 INR\nAssets:Checking\n</code></pre> <p></p> <p>You can see a new element in the UI called Rollover. This is basically the amount you have budgeted last month, but haven't spent. This will automatically rollover to the next month. That's pretty much it.</p> <p>To recap, there are just two things you need to do.</p> <p>1) Create a periodic transaction at the beginning of the month when you get your salary.</p> <p>2) Adjust your budget as you spend and make sure there is no deficit.</p>"},{"location":"reference/bulk-edit/","title":"Bulk Edit","text":"<p>Paisa provides bulk transaction editor to search and modify multiple transactions at once. The interface is made of two parts:</p> <p>1) Search input box allows you to narrow down the transactions you are interested in making changes</p> <p>2) Bulk Edit form allows you to make changes to the narrowed down set of transactions.</p>"},{"location":"reference/bulk-edit/#search","title":"Search","text":""},{"location":"reference/bulk-edit/#plain","title":"Plain","text":"<p>Paisa provides a powerful search query interface. Let's start with a few example queries.</p> <pre><code>Expenses:Utilities:Electricity\n</code></pre> <p>This will search for all transactions that have a posting with account named Expenses:Utilities:Electricity. By default, the search is case insensitive and will do a substring match. So, <code>Expenses:Utilities</code> will match Expenses:Utilities:Electricity account as well as. If you want to search an account name which has special characters like space in it, you can use double quotes to enclose it like <code>\"Expenses:Utilities:Hair Cut\"</code>.</p> <p>You can also search on transaction date. For example, if you want to show all the transactions made on 1st Jan 2023, just type <code>[2023-01-01]</code>. If you want to see all made on that month, just leave out the day part <code>[2023-01]</code>. You can do the same with year, <code>[2023]</code> will show all the transactions made in 2023.</p> <p>There is experimental support for natural language date. You can do queries like <code>[last month]</code>, <code>[last year]</code>, <code>[this month]</code>, <code>[last week]</code>, <code>[jan 2023]</code>, etc.</p> <p>Let's say you want to search by amount. You can do that by typing <code>42</code>, it will show all the transactions that have a posting with that amount.</p> <p>if you want to search a exact Account, you can do that using Regular Expression. Just type <code>/^Assets:Equity:APPLE$/</code>, you can also do case insensitive search by using the modifier <code>i</code> like <code>/^Assets:Equity:APPLE$/i</code>.</p>"},{"location":"reference/bulk-edit/#property","title":"Property","text":"<p>You can also search based on properties like account, commodity, amount, total, filename, payee and date.</p> <pre><code>account = Expenses:Utilities:Electricity\npayee =~ /uber/i\npayee = \"Advance Tax\"\ntotal &gt; 5000\ncommodity = GOLD\ndate &gt;= [2023-01-01]\nfilename = creditcard/2023/jan.ledger\n</code></pre> <p>The general format is <code>property operator value</code>. The property can be any of the following:</p> <ul> <li>account (posting account)</li> <li>commodity (posting commodity)</li> <li>amount (posting amount)</li> <li>total (transaction total)</li> <li>filename (name of the file the transaction is in)</li> <li>payee (transaction payee)</li> <li>date (transaction date)</li> </ul> <p>The operator can be any of the following:</p> <ul> <li>= (equal)</li> <li>=~ (regular expression match)</li> <li>&lt; (less than)</li> <li>&lt;= (less than or equal)</li> <li>&gt; (greater than)</li> <li>&gt;= (greater than or equal)</li> </ul> <p>Not all the combinations of property, operator and value would work, if in doubt, just try it out, the UI will show you an error if the query is not valid.</p> <p>In fact, in the previous format we saw, the property and operator is not specified and a default set is chosen based on the value type. For example, <code>42</code> will be treated as <code>amount = 42</code>, <code>Expenses:Utilities</code> will be treated as <code>account = Expenses:Utilities</code>, <code>/Expenses:Utilities/i</code> will be treated as <code>account =~ /Expenses:Utilities/i</code>, <code>[2023-01]</code> will be treated as <code>date = [2023-01]</code>.</p>"},{"location":"reference/bulk-edit/#conditional","title":"Conditional","text":"<p>You can combine multiple property based queries using <code>AND</code> and <code>OR</code>, you can negate them using <code>NOT</code></p> <pre><code>account = Expenses:Utilities AND payee =~ /uber/i\ncommodity = GOLD OR total &gt; 5000\ndate &gt;= [2023-01-01] AND date &lt; [2023-04-01]\naccount = Expenses:Utilities AND payee =~ /uber/i AND (total &gt; 5000 OR total &lt; 1000)\ntotal &lt; 5000 AND NOT account = Expenses:Utilities\n[last year] AND (payee =~ /swiggy/i OR payee =~ /phonepe/i)\n</code></pre> <p>If you leave out the conditional operator, it will be treated as <code>AND</code>. Both of the below queries are the same</p> <pre><code>account = Expenses:Utilities AND payee =~ /uber/i\naccount = Expenses:Utilities payee =~ /uber/i\n</code></pre>"},{"location":"reference/bulk-edit/#bulk-edit-form","title":"Bulk Edit Form","text":"<p>Currently bulk edit form supports only account rename feature. More will be added later. The preview button allows you to see the changes before you save them. It will show a side by side diff of the changes.</p>"},{"location":"reference/commodities/","title":"Commodities","text":"<p>There are no restrictions on the type of commodities that can be used in paisa. Anything like gold, mutual fund, NPS, etc can be tracked as a commodity. Few example transactions can be found below.</p> <pre><code>2019/02/18 NPS\nAssets:Equity:NPS:SBI:E/*(1)!*/       /*(2)!*/15.9378 NPS_SBI_E/*(3)!*/ @ /*(4)!*/23.5289 INR/*(5)!*/\nAssets:Checking\n2019/02/21 NPS\nAssets:Equity:NPS:SBI:E           1557.2175 NPS_SBI_E @ 23.8406 INR\nAssets:Checking\n2020/06/25 Gold\nAssets:Gold                       40 GOLD @ 4650 INR\nAssets:Checking\n</code></pre> <ol> <li>Account name</li> <li>Number of units purchased</li> <li>Commodity Name</li> <li>Purchase Price per Unit</li> <li>Currency</li> </ol> <p>paisa comes with inbuilt support for fetching the latest price of some commodities like mutual fund and NPS. For others, it will try to use the latest purchase price specified in the journal. For example, when you enter the second NPS transaction on <code>2019/02/21</code>, the valuation of your existing holdings will be adjusted based on the new purchase price.</p>"},{"location":"reference/commodities/#mutual-fund","title":"Mutual Fund","text":"<p>To automatically track the latest value of your mutual funds holdings, you need to link the commodity and the fund scheme code.</p> <pre><code>commodities:\n- name: NIFTY      # commodity name\ntype: mutualfund # type\ncode: 120716     # mutual fund scheme code\n- name: NIFTY_JR\ntype: mutualfund\ncode: 120684\n</code></pre> <p>The example config above links two commodities with their respective mutual fund scheme code. The scheme code can be found using the search command.</p> <pre><code># paisa search mutualfund\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Using cached results; pass '-u' to update the cache\n\u2714 ICICI Prudential Asset Management Company Limited\n\u2714 ICICI Prudential Nifty Next 50 Index Fund - Direct Plan -  Growth\nINFO Mutual Fund Scheme Code: 120684\n</code></pre>"},{"location":"reference/commodities/#nps","title":"NPS","text":"<p>To automatically track the latest value of your nps funds holdings, you need to link the commodity and the fund scheme code.</p> <pre><code>commodities:\n- name: NPS_HDFC_E      # commodity name\ntype: nps             # type\ncode: SM008002        # nps fund scheme code\n</code></pre> <p>The example config above links NPS fund commodity with their respective NPS fund scheme code. The scheme code can be found using the search command.</p> <pre><code># paisa search nps\nINFO Using config file: /home/john/finance/paisa.yaml\nINFO Using cached results; pass '-u' to update the cache\n\u2714 HDFC Pension Management Company Limited\n\u2714 HDFC PENSION MANAGEMENT COMPANY LIMITED SCHEME C - TIER I\nINFO NPS Fund Scheme Code: SM008002\n</code></pre>"},{"location":"reference/commodities/#stock","title":"Stock","text":"<p>To automatically track the latest value of your stock holdings, you need to link the commodity and the stock ticker name.</p> <pre><code>commodities:\n- name: APPLE           # commodity name\ntype: stock           # type\ncode: AAPL            # stock ticker code\n</code></pre> <p>Stock prices are fetched from yahoo finance website. The ticker code should match the code used in yahoo.</p>"},{"location":"reference/commodities/#realestate","title":"RealEstate","text":"<p>Some commodities like real estate are bought once and the price changes over time. Ledger allows you to set the price as on date.</p> <pre><code>2014/01/01 Home purchase\nAssets:House                                1 APT @ 4000000 INR\nLiabilities:Homeloan\nP 2016/01/01 00:00:00 APT 5000000 INR\nP 2018/01/01 00:00:00 APT 6500000 INR\nP 2020/01/01 00:00:00 APT 6700000 INR\nP 2021/01/01 00:00:00 APT 6300000 INR\nP 2022/01/01 00:00:00 APT 8000000 INR\n</code></pre>"},{"location":"reference/commodities/#currencies","title":"Currencies","text":"<p>If you need to deal with multiple currencies, just treat them as you would treat any commodity. Since paisa is a reporting tool, it will always try to convert other currencies to the default_currency. As long as the exchange rate from a currency to default_currency is available, paisa would work without issue</p> <pre><code>P 2023/05/01 00:00:00 USD 81.75 INR\n2023/05/01 Freelance Income\n;; conversion rate will be picked up from the price directive above\nIncome:Freelance                            -100 USD\nAssets:Checking\n2023/06/01 Freelance Income\n;; conversion rate is specified inline\nIncome:Freelance                            -200 USD @ 82.75 INR\nAssets:Checking\n2023/07/01 Netflix\n;; if not available for a date, will use previous known conversion rate (82.75)\nExpenses:Entertainment                        10 USD\nAssets:Checking\n</code></pre>"},{"location":"reference/commodities/#updates","title":"Updates","text":"<p>paisa fetches the latest price of the commodities only when update command is used. Make sure to run <code>paisa update</code> command after you make any changes to your journal file or you want to fetch the latest value of the commodities. The update can be performed from the UI as well via the dropdown in the top right corner.</p>"},{"location":"reference/config/","title":"Config","text":"<p>paisa checks for a config file named <code>paisa.yaml</code> in the current directory. It can also be set via flag <code>--config</code> or env variable <code>PAISA_CONFIG</code>.</p> <pre><code># Path to your journal file. It can be absolute or relative to the\n# config file. The main journal file can refer other files using\n# `include` as long as all the files are in the same or sub directory\n# REQUIRED\njournal_path: /home/john/finance/personal.ledger\n# Path to your database file. It can be absolute or relative to the\n# config file. The database file will be created if it does not exist.\n# REQUIRED\ndb_path: /home/john/finance/paisa.db\n# The ledger client to use\n# OPTIONAL, DEFAULT: ledger, ENUM: ledger, hledger\nledger_cli: hledger\n# The default currency to use. NOTE: Paisa tries to convert other\n# currencies to default currency, so make sure it's possible to\n# convert to default currency by specifying the exchange rate.\n#\n# OPTIONAL, DEFAULT: INR\ndefault_currency: INR\n# The locale used to format numbers. The list of locales supported\n# depends on your browser. It's known to work well with en-US and en-IN.\n#\n# OPTIONAL, DEFAULT: en-IN\nlocale: en-IN\n# First month of the financial year. This can be set to 1 to follow\n# January to December.\n#\n# OPTIONAL, DEFAULT: 4\nfinancial_year_starting_month: 4\n## Retirement\nretirement:\n# Safe Withdrawal Rate\n# OPTIONAL, DEFAULT: 4\nswr: 2\n# List of expense accounts\n# OPTIONAL, DEFAULT: Expenses:*\nexpenses:\n- Expenses:Clothing\n- Expenses:Education\n- Expenses:Entertainment\n- Expenses:Food\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Restaurant\n- Expenses:Shopping\n- Expenses:Utilities\n# List of accounts where you keep retirement savings\n# OPTIONAL, DEFAULT: Assets:*\nsavings:\n- Assets:Equity:*\n- Assets:Debt:*\n# By default average of last 3 year expenses will be used to\n# calculate your yearly expenses. This can be overriden by setting\n# this config to positive value\n# OPTIONAL, DEFAULT: 0\nyearly_expenses: 0\n## Schedule AL\n# OPTIONAL, DEFAULT: []\nschedule_al:\n# Code\n# REQUIRED, ENUM: immovable, metal, art, vehicle, bank, share,\n# insurance, loan, cash, liability\n- code: metal\naccounts:\n- Assets:Gold\n- code: bank\naccounts:\n- Assets:Checking\n- Assets:Debt:Cash:FD\n- code: share\naccounts:\n- Assets:Equity:*\n- code: insurance\naccounts:\n- Assets:Debt:Insurance\n## Allocation Target\n# OPTIONAL, DEFAULT: []\nallocation_targets:\n- name: Debt\ntarget: 30\naccounts:\n- Assets:Debt:*\n- Assets:Checking\n- name: Equity\ntarget: 60\naccounts:\n- Assets:Equity:*\n- name: Equity Foreign\ntarget: 20\naccounts:\n- Assets:Equity:NASDAQ\n- name: Equity Index\ntarget: 20\naccounts:\n- Assets:Equity:NIFTY\n- name: Equity Active\ntarget: 20\naccounts:\n- Assets:Equity:PPFAS\n- name: Others\ntarget: 10\naccounts:\n- Assets:Gold\n- Assets:RealEstate\n## Commodities\n# OPTIONAL, DEFAULT: []\ncommodities:\n- name: NASDAQ\n# Required, ENUM: mutualfund, stock, nps, unknown\ntype: mutualfund\n# differs based on type\ncode: 145552\nharvest: 1095\n# Optional, ENUM: equity65, equity35, debt, unlisted_equity\ntax_category: debt\n- name: NIFTY\ntype: mutualfund\ncode: 120716\nharvest: 365\ntax_category: equity65\n- name: APPLE\ntype: stock\ncode: AAPL\nharvest: 1095\ntax_category: equity65\n</code></pre>"},{"location":"reference/import/","title":"Import","text":"<p>Paisa provides ability to convert CSV, TXT, XLS, XLSX or PDF files to Ledger file format. The import page is made of three components.</p> <p>1) File Preview - You can drag and drop files here to preview the contents.</p> <p>2) Ledger Preview - This is where the converted ledger file will be shown.</p> <p>3) Template Editor - This is where you can edit the template.</p> <p>Each row in the CSV file is converted to a transaction in the ledger. This conversion is controlled by the template.</p> <pre><code>{{#if (and (isDate ROW.A \"DD/MM/YYYY\") (isBlank ROW.G))}}\n{{date ROW.A \"DD/MM/YYYY\"}} {{ROW.C}}\n{{predictAccount prefix=\"Expenses\"}}        {{ROW.F}} INR\n    Assets:Checking\n{{/if}}\n</code></pre> <p>Let's break this down. The first line is a conditional statement. It checks if the row has a date in the first column. You can refer any column using their alphabets. The second line constructs the transaction header. The third line constructs the first posting. The fourth line constructs the second posting.</p> <p>Effectively a single row in the CSV file is converted to a single transaction like this.</p> <pre><code>2023/03/28 AMAZON HTTP://WWW.AM IN\n    Expenses:Shopping       249.00 INR\n    Assets:Checking\n</code></pre> <p>The template is written in Handlebars. Paisa provides a few helper functions to make it easier to write the template.</p>"},{"location":"reference/import/#template-management","title":"Template Management","text":"<p>Paisa ships with a few builtin templates. You can also create your own. To create a new template, edit the template and click on the <code>Save As</code> button.</p> <p>The import system is designed to be extensible. If you are unable to create a template suitable for your CSV file, please open an issue with a sample CSV file.</p>"},{"location":"reference/import/#template-data","title":"Template Data","text":"<ol> <li>ROW - This is the current row being processed. You can refer to     any column using their alphabets. For example, <code>ROW.A</code> refers to     the first column, <code>ROW.B</code> refers to the second column and so     on. The current row index is available as <code>ROW.index</code>.</li> </ol> Example <pre><code>{\n\"A\": \"28/03/2023\",\n\"B\": \"7357680821\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"12\",\n\"E\": \"0\",\n\"F\": \"249.00\",\n\"G\": \"\",\n\"index\": 6\n}\n</code></pre> <ol> <li>SHEET - This is the entire sheet. It is an array of rows. You    can refer a specific cell using the following syntax <code>SHEET.5.A</code>.</li> </ol> Example <pre><code>[\n{\n\"A\": \"Accountno:\",\n\"B\": \"49493xxx003030\",\n\"index\": 0\n},\n{\n\"A\": \"Customer Name:\",\n\"B\": \"MR John Doe\",\n\"index\": 1\n},\n{\n\"A\": \"Address:\",\n\"B\": \"1234, ABC Street, XYZ City, 123456\",\n\"index\": 2\n},\n{\n\"A\": \"Transaction Details:\",\n\"index\": 3\n},\n{\n\"A\": \"Date\",\n\"B\": \"Sr.No.\",\n\"C\": \"Transaction Details\",\n\"D\": \"Reward Point Header\",\n\"E\": \"Intl.Amount\",\n\"F\": \"Amount(in Rs)\",\n\"G\": \"BillingAmountSign\",\n\"index\": 4\n},\n{\n\"A\": \"49493xxx003030\",\n\"index\": 5\n},\n{\n\"A\": \"28/03/2023\",\n\"B\": \"7357680821\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"12\",\n\"E\": \"0\",\n\"F\": \"249.00\",\n\"G\": \"\",\n\"index\": 6\n},\n{\n\"A\": \"28/03/2023\",\n\"B\": \"7357821997\",\n\"C\": \"AMAZON HTTP://WWW.AM IN\",\n\"D\": \"28\",\n\"E\": \"0\",\n\"F\": \"575.00\",\n\"G\": \"\",\n\"index\": 7\n}\n]\n</code></pre>"},{"location":"reference/import/#template-helpers","title":"Template Helpers","text":"<p>1) <code>eq(a: any, b: any): boolean</code> - Checks if the two values are    equal.</p> <p>2) <code>not(value: any): boolean</code> - Negates the given value.</p> <p>3) <code>and(...args: any[]): boolean</code> - Returns true if all the    arguments are true.</p> <p>4) <code>or(...args: any[]): boolean</code> - Returns true if any of the    arguments are true.</p> <p>5) <code>isDate(str: string, format: string): boolean</code> - Checks if the    given string is a valid date in the given format. Refer Day.js    for the full list of supported formats.</p> <p>6) <code>predictAccount(...corpus: string[], {prefix?: string}): string</code> -    Predicts the account name based on your existing ledger file. The    corpus provided will be matched with the existing transaction    description and amount.</p> <pre><code>If `corpus` is not provided, the entire `ROW` will be used\n\nThe `prefix` is optional and will be used to filter out matching\n</code></pre> <p>accounts. If no match is found, <code>Unknown</code> will be returned.</p> <pre><code>{{predictAccount prefix=\"Income\"}}\n{{predictAccount ROW.C ROW.F prefix=\"Income\"}}\n</code></pre> <p>NOTE: prediction will only work if you have similar transactions in ledger file. It usually means, first time you have to manually fix the Unknown account and then subsequent imports will work</p> <p>7) <code>isBlank(str: string): boolean</code> - Checks if the given string is    blank.</p> <p>8) <code>date(str: string, format: string): string</code> - Parses the given    string as a date in the given format and returns the date in the    format <code>YYYY/MM/DD</code>. Refer Day.js    for the full list of supported formats.</p> <p>9) <code>findAbove(column: string, {regexp?: string}): string</code> - Finds the first cell above the current row in the given column. If <code>regexp</code> is provided, the search will continue till a match is found</p> <p>```handlebars {{findAbove B regexp=\"LIMITED\"}} `````</p> <p>10) <code>acronym(str: string): string</code> - Returns the acronym of the given     string that is suitable to be used as a commodity symbol. For     example, <code>UTI Nifty Next 50 Index Growth Direct Plan</code> will be     converted to <code>UNNI</code></p> <p>11) <code>negate(value: string): number</code> - Negates the given value. For     example, <code>negate(\"123.45\")</code> will return <code>-123.45</code></p> <p>12) <code>replace(str: string, search: string, replace: string): string</code> -     Replaces all the occurrences of <code>search</code> with <code>replace</code> in the     given string.</p> <p>13) <code>trim(str: string): string</code> - Trims the given string.</p> <p>14) <code>amount(str: string, {default?: string}): string</code> - Converts the given string to a valid amount. If the string is blank, the default value is used. Examples <code>(0.9534)</code> to <code>-0.9534</code>, <code>\u20b9 1,234.56</code> to <code>1234.56</code></p> <p>15) <code>regexpTest(str: string, regexp: string): boolean</code> - Tests the     given string against the given regular expression.</p>"},{"location":"reference/ledger-cli/","title":"Ledger CLI","text":"<p>Paisa is compatible with ledger and hledger. By default paisa will try to use ledger, if you prefer to use hledger instead, change the <code>ledger_cli</code> value in paisa.yaml</p> <pre><code>ledger_cli: hledger\n</code></pre>"},{"location":"reference/recurring/","title":"Recurring","text":"<p>Some of the transactions recur on a regular interval and it might be useful to know the next due date for such transactions. Recurring page shows the upcoming or recently missed transactions.</p> <p>Paisa depends on the posting metadata to identify which transactions are recurring. This metadata can be added in couple of ways. Let's say you pay rent every month and you want to mark it as recurring, a typical journal would like below</p> <pre><code>2023/07/01 Rent\nExpenses:Rent                             15,000 INR\nAssets:Checking\n2023/08/01 Rent\nExpenses:Rent                             15,000 INR\nAssets:Checking\n</code></pre> <p>You can manually tag a posting by adding <code>; Recurring: Rent</code>.</p> <pre><code>2023/07/01 Rent\n; Recurring: Rent\nExpenses:Rent                             15,000 INR\nAssets:Checking\n2023/08/01 Rent\n; Recurring: Rent\nExpenses:Rent                             15,000 INR\nAssets:Checking\n</code></pre> <p>The first part of the metadata before the colon is called tag name. It should be <code>Recurring</code>. The second part is the tag value. This value is used to group transactions.</p> <p>Tagging each and every posting can be tiresome. Ledger has a feature called Automated Transaction which can make this process simpler.</p> <pre><code>= Expenses:Rent\n; Recurring: Rent\n</code></pre> <p>The first line is the predicate and the line below it will get added to any matching posting. By default, it will match the posting account name. But you can target other attributes like payee, amount etc. You can find more examples below, more info about predicate is available on Ledger docs</p> <pre><code>= expr payee=~/^PPF$/\n; Recurring: PPF\n= expr payee=~/Mutual Fund/\n; Recurring: Mutual Fund\n= expr 'account=~/Expenses:Insurance/ and (payee=~/HDFC/)'\n; Recurring: Life Insurance\n= expr 'account=~/Expenses:Insurance/ and !(payee=~/HDFC/)'\n; Recurring: Bike Insurance\n= expr payee=~/Savings Interest/\n; Recurring: Savings Interest\n</code></pre>"},{"location":"reference/retirement/","title":"Retirement","text":"<p>Paisa will help you plan your retirement and track your progress. The first part is figuring out what should be your retirement corpus. This will be your target. Instead of specifying the amount explicitly, you can specify your expected yearly expenses and the safe withdrawal rate.</p> <pre><code>retirement:\nswr: 3.3\nyearly_expenses: 1100000\n</code></pre> <p>If you use paisa to track expenses, instead of specifying the <code>yearly_expenses</code>, you can specify the list of accounts. Paisa will take the average of the last 3 year expenses</p> <pre><code>retirement:\nswr: 2\nexpenses:\n- Expenses:Entertainment\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Shopping\n- Expenses:Utilities\n</code></pre> <p>Now that the target is specified, you need to specify the list of accounts where you keep your retirement savings.</p> <pre><code>retirement:\nswr: 2\nexpenses:\n- Expenses:Entertainment\n- Expenses:Gift\n- Expenses:Insurance\n- Expenses:Misc\n- Expenses:Shopping\n- Expenses:Utilities\nsavings:\n- Assets:Equity:*\n- Assets:Debt:*\n</code></pre>"},{"location":"reference/tax/","title":"Tax","text":"<p>Paisa provides few features to help with tax filing and tax optimization.</p>"},{"location":"reference/tax/#disclaimer","title":"Disclaimer","text":"<p>The author of this tool is not an accountant, the calculations are made based on their interpretation of rules and regulation. This tool is distributed free hoping it would be useful. The users are advised to consult a tax accountant before making any decision based on the information provided here. Check the LICENSE of paisa for more details.</p>"},{"location":"reference/tax/capital-gains/","title":"Capital Gains","text":"<p>Mutual Funds are considered as capital asset and capital gains tax will be charged on any gains. Capital Gains page shows the financial year wise capital gains tax based on the withdrawal transaction. The sum total, account wise breakdown, and per buy/sell match information are available.</p> <p>Only commodities with <code>tax_category</code> are considered. Please check Tax Harvesting page for configuration details.</p>"},{"location":"reference/tax/capital-gains/#gain","title":"Gain","text":"<p>The difference between the purchase and sell price.</p>"},{"location":"reference/tax/capital-gains/#taxable-gain","title":"Taxable Gain","text":"<p>The gain after applying Indexation or Grandfathering provision.</p> <p>Based on the duration between the purchase and sell date, an asset might be classified as Short Term or Long Term.</p>"},{"location":"reference/tax/capital-gains/#short-term-tax","title":"Short Term Tax","text":"<p>This would be a percentage of the Taxable Gain. The percentage varies based on the asset class.</p>"},{"location":"reference/tax/capital-gains/#long-term-tax","title":"Long Term Tax","text":"<p>This would be a percentage of the Taxable Gain. The percentage varies based on the asset class.</p>"},{"location":"reference/tax/capital-gains/#taxable-at-slab-rate","title":"Taxable at Slab Rate","text":"<p>There are cases where the gain would be added to taxable income and charged Slab rate. Since the tax rate would depend on the person, the whole taxable amount is shown instead of the tax. You can multiply this with your slab rate to get the tax amount.</p>"},{"location":"reference/tax/schedule-al/","title":"Schedule AL","text":"<p>As per the Indian Income tax law, citizens are obligated to report their entire Assets and Liabilities if the total income exceeds \u20b950 lakh. Paisa helps with the computation of the amount.</p> code Section Details immovable A (1) Immovable Assets metal B (1) (i) Jewellery, bullion etc. art B (1) (ii) Archaeological collections, drawings, painting, sculpture or any work of art vehicle B (1) (iii) Vehicles, yachts, boats and aircrafts bank B (1) (iv) (a) Financial assets: Bank (including all deposits) share B (1) (iv) (b) Financial assets: Shares and securities insurance B (1) (iv) (c) Financial assets: Insurance policies loan B (1) (iv) (d) Financial assets: Loans and advances given cash B (1) (iv) (e) Financial assets: Cash in hand liability C (1) Liabilities <p>All you need to do is to specify the accounts that belong to each section. Paisa will compute the total as on the last day of the previous financial year.</p> <pre><code>schedule_al:\n- code: bank\naccounts:\n- Assets:Checking\n- code: share\naccounts:\n- Assets:Equity:*\n- Assets:Debt:*\n</code></pre>"},{"location":"reference/tax/tax-harvesting/","title":"Tax Harvesting","text":"<p>Gains from asset types like Mutual Fund, Stock are subject to capital gains tax. The taxation rate itself differs based on how long you hold your investment, whether it's debt or equity, whether you have more than 1 Lakh gains in a year etc. To further complicate things, there might be exit load applicable.</p> <p>Paisa takes a generic approach and let the user configure when a commodity is safe to harvest. There are two fields related to tax harvesting.</p> <ol> <li> <p>harvest - specifies the number of days after which the commodity is    eligible for tax harvesting. This should be set based on fund exit    load, fund category etc</p> </li> <li> <p>tax_category - This defines how the taxes are calculated as the    government usually tweaks the tax code regularly with various rules    like grandfathering, cost inflation index adjustment, etc.</p> <ol> <li> <p><code>equity65</code> - This is for 65% or more investment in Indian    equity.</p> </li> <li> <p><code>equity35</code> - This if for 35% or more investment in India equity    but less than 65%</p> </li> <li> <p><code>debt</code> - This is for debt funds.</p> </li> <li> <p><code>unlisted_equity</code> - This is for unlisted foreign on Indian equity.</p> </li> </ol> </li> </ol> <pre><code>commodities:\n- name: NIFTY\ntype: mutualfund\ncode: 120716\nharvest: 365\ntax_category: equity65\n- name: ABSTF\ntype: mutualfund\ncode: 119533\nharvest: 1095\ntax_category: debt\n</code></pre> <p>The tax harvest page will show the list of accounts eligible for harvesting.</p>"},{"location":"reference/tax/tax-harvesting/#multiple-folios","title":"Multiple Folios","text":"<p>Paisa uses FIFO method within an Account. If you have multiple folios, this might result in incorrect values. The issue can be solved by using a different Account for each folio.</p>"}]}